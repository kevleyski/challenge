diff --git a/build.sh b/build.sh
index 9e558d5..deedb80 100755
--- a/build.sh
+++ b/build.sh
@@ -5,18 +5,18 @@
 
 # directory containing the ARM shared libraries (rootfs, lib/ of SD card)
 # specifically libEGL.so and libGLESv2.so
-ARM_LIBS=/opt/bcm-rootfs/opt/vc/lib
+ARM_LIBS=/opt/vc/lib
 SDL_LIB=lib
 
 # directory containing baseq3/ containing .pk3 files - baseq3 on CD
-BASEQ3_DIR="/home/${USER}/"
+BASEQ3_DIR="/home/${USER}/quake3/baseq3"
 
 # directory to find khronos linux make files (with include/ containing
 # headers! Make needs them.)
-INCLUDES="-I/opt/bcm-rootfs/opt/vc/include -I/opt/bcm-rootfs/opt/vc/include/interface/vcos/pthreads"
+INCLUDES="-I/opt/vc/include -I/opt/vc/include/interface/vcos/pthreads"
 
 # prefix of arm cross compiler installed
-CROSS_COMPILE=bcm2708-
+#CROSS_COMPILE=bcm2708-
 
 # clean
 if [ $# -ge 1 ] && [ $1 = clean ]; then
@@ -25,9 +25,9 @@ if [ $# -ge 1 ] && [ $1 = clean ]; then
 fi
 
 # sdl not disabled
-make -j4 -f Makefile COPYDIR="$BASEQ3_DIR" ARCH=arm \
+make  -f Makefile COPYDIR="$BASEQ3_DIR" ARCH=arm \
 	CC=""$CROSS_COMPILE"gcc" USE_SVN=0 USE_CURL=0 USE_OPENAL=0 \
-	CFLAGS="-DVCMODS_MISC -DVCMODS_OPENGLES -DVCMODS_DEPTH -DVCMODS_REPLACETRIG $INCLUDES" \
+	CFLAGS="-g -DVCMODS_MISC -DVCMODS_OPENGLES -DVCMODS_DEPTH -DVCMODS_REPLACETRIG $INCLUDES" \
 	LDFLAGS="-L"$ARM_LIBS" -L$SDL_LIB -lSDL -lvchostif -lvmcs_rpc_client -lvcfiled_check -lbcm_host -lkhrn_static -lvchiq_arm -lopenmaxil -lEGL -lGLESv2 -lvcos -lrt"
 
 # copy the required pak3 files over
diff --git a/code/es/es_glimp.c b/code/es/es_glimp.c
index b2e51e5..bb16958 100644
--- a/code/es/es_glimp.c
+++ b/code/es/es_glimp.c
@@ -256,7 +256,7 @@ static qboolean GLimp_StartDriverAndSetMode( int mode, qboolean fullscreen, Nati
       EGL_DEPTH_SIZE,     16,
       EGL_STENCIL_SIZE,   0,
       EGL_SURFACE_TYPE,   EGL_WINDOW_BIT,
-      EGL_SAMPLE_BUFFERS, 1,
+//      EGL_SAMPLE_BUFFERS, 1,
       EGL_NONE
    };
 
@@ -329,7 +329,7 @@ static qboolean GLimp_StartDriverAndSetMode( int mode, qboolean fullscreen, Nati
 
    ri.Printf(PRINT_ALL, "Using native window %d\n", (int)hWnd);
 
-   g_EGLWindowSurface = eglCreateWindowSurface(g_EGLDisplay, g_EGLConfig, hWnd, NULL);
+   g_EGLWindowSurface = eglCreateWindowSurface(g_EGLDisplay, g_EGLConfig, 11/*hWnd*/, NULL);
    if (g_EGLWindowSurface == EGL_NO_SURFACE) {
       ri.Printf(PRINT_ALL, "eglCreateWindowSurface() failed\n");
       return qfalse;
